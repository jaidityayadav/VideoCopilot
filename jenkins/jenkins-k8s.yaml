# Jenkins Kubernetes Deployment
# This file contains all Kubernetes resources needed to deploy Jenkins

---
# Namespace for Jenkins
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
  labels:
    name: jenkins

---
# ServiceAccount for Jenkins
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins

---
# ClusterRole for Jenkins with required permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jenkins
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/exec"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get","list","watch"]
- apiGroups: [""]
  resources: ["pods/portforward"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get","list","create","update","patch","delete"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get","list","create","update","patch","delete"]
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get","list"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: ["apps"]
  resources: ["deployments/scale"]
  verbs: ["create","delete","get","list","patch","update","watch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get","list","watch","update"]

---
# ClusterRoleBinding for Jenkins
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jenkins
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins

---
# PersistentVolume for Jenkins data
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jenkins-pv
  namespace: jenkins
spec:
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /opt/jenkins-data

---
# PersistentVolumeClaim for Jenkins
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  namespace: jenkins
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: local-storage

---
# ConfigMap for Jenkins configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-config
  namespace: jenkins
data:
  jenkins.yaml: |
    jenkins:
      numExecutors: 2
      clouds:
      - kubernetes:
          name: "kubernetes"
          serverUrl: "https://kubernetes.default:443"
          namespace: "jenkins"
          jenkinsUrl: "http://jenkins:8080"
          jenkinsTunnel: "jenkins:50000"
          containerCapStr: 10
          maxRequestsPerHostStr: 64
          templates:
          - name: "jenkins-agent"
            namespace: "jenkins"
            label: "jenkins-agent"
            nodeUsageMode: NORMAL
            containers:
            - name: "jnlp"
              image: "jenkins/inbound-agent:latest"
              alwaysPullImage: false
              workingDir: "/tmp"
              command: ""
              args: ""
              ttyEnabled: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1000m"
              resourceLimitMemory: "1Gi"
            - name: "docker"
              image: "docker:dind"
              alwaysPullImage: false
              workingDir: "/tmp"
              ttyEnabled: true
              privileged: true
              resourceRequestCpu: "500m"
              resourceRequestMemory: "512Mi"
              resourceLimitCpu: "1000m"
              resourceLimitMemory: "1Gi"
              envVars:
              - envVar:
                  key: "DOCKER_TLS_CERTDIR"
                  value: ""
    
    unclassified:
      location:
        adminAddress: "admin@videocopilot.local"
        url: "http://jenkins.jenkins.svc.cluster.local:8080"
      
    security:
      globalJobDslSecurityConfiguration:
        useScriptSecurity: false

---
# Secret for Jenkins initial admin password
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-secrets
  namespace: jenkins
type: Opaque
data:
  jenkins-admin-password: YWRtaW4xMjM=  # admin123 (base64 encoded)
  jenkins-admin-user: YWRtaW4=  # admin (base64 encoded)

---
# Jenkins Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jenkins
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccount: jenkins
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
      - name: jenkins
        image: jenkins/jenkins:lts-jdk11
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 50000
          name: jnlp
        env:
        - name: JENKINS_OPTS
          value: "--httpPort=8080"
        - name: JAVA_OPTS
          value: "-Xmx2048m -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85"
        - name: CASC_JENKINS_CONFIG
          value: "/var/jenkins_home/casc_configs/jenkins.yaml"
        - name: JENKINS_ADMIN_ID
          valueFrom:
            secretKeyRef:
              name: jenkins-secrets
              key: jenkins-admin-user
        - name: JENKINS_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: jenkins-secrets
              key: jenkins-admin-password
        volumeMounts:
        - name: jenkins-data
          mountPath: /var/jenkins_home
        - name: jenkins-config
          mountPath: /var/jenkins_home/casc_configs
        - name: docker-sock
          mountPath: /var/run/docker.sock
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 12
        readinessProbe:
          httpGet:
            path: /login
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: jenkins-data
        persistentVolumeClaim:
          claimName: jenkins-pvc
      - name: jenkins-config
        configMap:
          name: jenkins-config
      - name: docker-sock
        hostPath:
          path: /var/run/docker.sock

---
# Jenkins Service
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
  labels:
    app: jenkins
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  - port: 50000
    targetPort: 50000
    name: jnlp
  selector:
    app: jenkins

---
# Jenkins LoadBalancer Service for external access
apiVersion: v1
kind: Service
metadata:
  name: jenkins-lb
  namespace: jenkins
  labels:
    app: jenkins
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
    name: http
  selector:
    app: jenkins

---
# Jenkins Ingress (alternative to LoadBalancer)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jenkins-ingress
  namespace: jenkins
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: "jenkins-auth@kubernetescrd"
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  rules:
  - host: jenkins.videocopilot.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: jenkins
            port:
              number: 8080
  tls:
  - hosts:
    - jenkins.videocopilot.local
    secretName: jenkins-tls-secret

---
# Traefik Middleware for Jenkins authentication
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: jenkins-auth
  namespace: jenkins
spec:
  basicAuth:
    secret: jenkins-basic-auth

---
# Secret for Jenkins basic auth
apiVersion: v1
kind: Secret
metadata:
  name: jenkins-basic-auth
  namespace: jenkins
type: Opaque
data:
  # admin:$2y$10$... (htpasswd generated)
  users: YWRtaW46JGFwcjEkSDY1dnlmeHkkVmp6a1o0blRXcFBWUGU3VWZyV25QMAo=