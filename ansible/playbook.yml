---
- name: Configure VideoCopilot Infrastructure
  hosts: videocopilot
  become: true
  vars:
    kubernetes_version: "1.28"
    docker_version: "24.0"
    node_version: "20"
    python_version: "3.11"
  vars_files:
    - vault.yml
  
  tasks:
    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install base dependencies
      apt:
        name:
          - curl
          - wget
          - git
          - htop
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - python3-pip
          - python3-venv
          - build-essential
        state: present

    - name: Install Docker
      block:
        - name: Remove old Docker packages
          apt:
            name:
              - docker
              - docker-engine
              - docker.io
              - containerd
              - runc
            state: absent

        - name: Install Docker prerequisites
          apt:
            name:
              - ca-certificates
              - curl
              - gnupg
              - lsb-release
            state: present

        - name: Create directory for Docker keyring
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Add Docker GPG key
          shell: |
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
          args:
            creates: /etc/apt/keyrings/docker.gpg

        - name: Add Docker repository
          shell: |
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
          args:
            creates: /etc/apt/sources.list.d/docker.list

        - name: Update package cache after adding Docker repository
          apt:
            update_cache: yes

        - name: Install Docker CE
          apt:
            name:
              - docker-ce
              - docker-ce-cli
              - containerd.io
              - docker-buildx-plugin
              - docker-compose-plugin
            state: present

        - name: Start and enable Docker
          systemd:
            name: docker
            state: started
            enabled: yes

        - name: Add videocopilot user to docker group
          user:
            name: videocopilot
            groups: docker
            append: yes

    - name: Install Node.js
      block:
        - name: Create keyrings directory
          file:
            path: /etc/apt/keyrings
            state: directory
            mode: '0755'

        - name: Add NodeSource GPG key (modern method)
          get_url:
            url: https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key
            dest: /etc/apt/keyrings/nodesource.asc
            mode: '0644'

        - name: Add NodeSource repository (modern method)
          apt_repository:
            repo: "deb [signed-by=/etc/apt/keyrings/nodesource.asc] https://deb.nodesource.com/node_{{ node_version }}.x nodistro main"
            state: present

        - name: Install Node.js
          apt:
            name: nodejs
            state: present

    - name: Install kubectl (standalone)
      block:
        - name: Download kubectl binary
          get_url:
            url: "https://dl.k8s.io/release/v{{ kubernetes_version }}.0/bin/linux/amd64/kubectl"
            dest: /usr/local/bin/kubectl
            mode: '0755'
            owner: root
            group: root

        - name: Verify kubectl installation
          command: kubectl version --client
          register: kubectl_version
          changed_when: false

        - name: Display kubectl version
          debug:
            var: kubectl_version.stdout

    - name: Install k3s (lightweight Kubernetes)
      shell: |
        curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC="--disable traefik --disable servicelb --write-kubeconfig-mode 644" sh -
      args:
        creates: /usr/local/bin/k3s

    - name: Wait for k3s to be ready
      wait_for:
        port: 6443
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 300

    - name: Create kubeconfig directory for videocopilot user
      file:
        path: /home/videocopilot/.kube
        state: directory
        owner: videocopilot
        group: videocopilot
        mode: '0755'

    - name: Copy kubeconfig for videocopilot user
      copy:
        src: /etc/rancher/k3s/k3s.yaml
        dest: /home/videocopilot/.kube/config
        owner: videocopilot
        group: videocopilot
        mode: '0600'
        remote_src: yes

    - name: Install Helm
      block:
        - name: Download Helm installer
          get_url:
            url: https://get.helm.sh/helm-v3.12.0-linux-amd64.tar.gz
            dest: /tmp/helm.tar.gz

        - name: Extract Helm
          unarchive:
            src: /tmp/helm.tar.gz
            dest: /tmp/
            remote_src: yes

        - name: Install Helm binary
          copy:
            src: /tmp/linux-amd64/helm
            dest: /usr/local/bin/helm
            mode: '0755'
            remote_src: yes

    - name: Install Jenkins
      block:
        - name: Update package cache before Jenkins
          apt:
            update_cache: yes

        - name: Add Jenkins GPG key
          apt_key:
            url: https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
            state: present

        - name: Add Jenkins repository
          apt_repository:
            repo: "deb https://pkg.jenkins.io/debian-stable binary/"
            state: present

        - name: Update package cache after adding Jenkins repo
          apt:
            update_cache: yes

        - name: Install OpenJDK 17 (recommended for Jenkins)
          apt:
            name: openjdk-17-jdk
            state: present

        - name: Set JAVA_HOME environment variable
          lineinfile:
            path: /etc/environment
            regexp: '^JAVA_HOME='
            line: 'JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64'

        - name: Install Jenkins
          apt:
            name: jenkins
            state: present

        - name: Create Jenkins directory
          file:
            path: /var/lib/jenkins
            state: directory
            owner: jenkins
            group: jenkins
            mode: '0755'

        - name: Set Jenkins JAVA_HOME in default file
          lineinfile:
            path: /etc/default/jenkins
            regexp: '^JAVA_HOME='
            line: 'JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64'
            create: yes

        - name: Ensure Jenkins can write to its directory
          file:
            path: /var/lib/jenkins
            state: directory
            owner: jenkins
            group: jenkins
            mode: '0755'
            recurse: yes

        - name: Set Jenkins port configuration
          lineinfile:
            path: /etc/default/jenkins
            regexp: '^HTTP_PORT='
            line: 'HTTP_PORT=8080'
            create: yes

        - name: Reload systemd daemon
          systemd:
            daemon_reload: yes

        - name: Enable Jenkins service
          systemd:
            name: jenkins
            enabled: yes

        - name: Start Jenkins service with proper error handling
          systemd:
            name: jenkins
            state: started
          register: jenkins_start
          ignore_errors: yes

        - name: Wait a bit for Jenkins to initialize
          pause:
            seconds: 30
          when: jenkins_start is succeeded

        - name: Check if Jenkins is running on port 8080
          wait_for:
            port: 8080
            host: localhost
            delay: 5
            timeout: 120
          when: jenkins_start is succeeded

        - name: Add jenkins user to docker group
          user:
            name: jenkins
            groups: docker
            append: yes

        - name: Show Jenkins status if it failed
          command: systemctl status jenkins.service --no-pager -l
          register: jenkins_status
          when: jenkins_start is failed

        - name: Show Jenkins logs if it failed
          command: journalctl -u jenkins.service --no-pager -n 20
          register: jenkins_logs
          when: jenkins_start is failed

        - name: Display Jenkins status
          debug:
            var: jenkins_status.stdout
          when: jenkins_start is failed

        - name: Display Jenkins logs
          debug:
            var: jenkins_logs.stdout
          when: jenkins_start is failed

        - name: Restart Jenkins if it failed to start initially
          systemd:
            name: jenkins
            state: restarted
          when: jenkins_start is failed
          ignore_errors: yes

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: videocopilot
        group: videocopilot
        mode: '0755'
      loop:
        - /opt/videocopilot
        - /opt/videocopilot/envs
        - /opt/videocopilot/configs
        - /opt/videocopilot/data
        - /opt/videocopilot/logs
        - /opt/videocopilot/backups

    - name: Install Python packages
      pip:
        name:
          - docker
          - kubernetes
          - ansible
          - requests
        state: present

    - name: Configure log rotation
      copy:
        content: |
          /opt/videocopilot/logs/*.log {
              daily
              missingok
              rotate 30
              compress
              notifempty
              sharedscripts
              postrotate
                  systemctl reload rsyslog
              endscript
          }
        dest: /etc/logrotate.d/videocopilot

    - name: Create systemd service for log collection
      copy:
        content: |
          [Unit]
          Description=VideoCopilot Log Collector
          After=docker.service

          [Service]
          Type=simple
          User=videocopilot
          WorkingDirectory=/opt/videocopilot
          ExecStart=/usr/bin/docker logs -f --tail=100 $(docker ps -q)
          Restart=always
          RestartSec=10

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/videocopilot-logs.service

    - name: Create cleanup script
      copy:
        content: |
          #!/bin/bash
          # Cleanup old Docker images and containers
          docker system prune -af --volumes
          # Cleanup old logs
          find /opt/videocopilot/logs -name "*.log" -mtime +30 -delete
          # Cleanup old backups
          find /opt/videocopilot/backups -name "*.tar.gz" -mtime +7 -delete
        dest: /opt/videocopilot/cleanup.sh
        mode: '0755'
        owner: videocopilot
        group: videocopilot

    - name: Setup cleanup cron job
      cron:
        name: "VideoCopilot cleanup"
        hour: "2"
        minute: "0"
        job: "/opt/videocopilot/cleanup.sh"
        user: videocopilot

    - name: Create environment files from vault
      block:
        - name: Create .env file for web-app
          copy:
            content: |
              # Database
              DATABASE_URL="{{ DATABASE_URL }}"
              
              # NextAuth
              NEXTAUTH_SECRET="{{ NEXTAUTH_SECRET }}"
              NEXTAUTH_URL="{{ NEXTAUTH_URL }}"
              
              # AWS S3
              AWS_ACCESS_KEY_ID="{{ AWS_ACCESS_KEY_ID }}"
              AWS_SECRET_ACCESS_KEY="{{ AWS_SECRET_ACCESS_KEY }}"
              AWS_REGION="{{ AWS_REGION }}"
              AWS_S3_BUCKET="{{ AWS_S3_BUCKET }}"
              S3_BUCKET_NAME="{{ S3_BUCKET_NAME }}"
              
              # Service URLs
              INTELLIGENCE_SERVICE_URL="{{ INTELLIGENCE_SERVICE_URL }}"
              EMBEDDING_SERVICE_URL="{{ EMBEDDING_SERVICE_URL }}"
              VIDEO_PROCESSING_SERVICE_URL="{{ VIDEO_PROCESSING_SERVICE_URL }}"
              
              # JWT
              JWT_SECRET="{{ JWT_SECRET }}"
            dest: /opt/videocopilot/envs/web-app.env
            mode: '0600'
            owner: videocopilot
            group: videocopilot

        - name: Create .env file for embedding-service
          copy:
            content: |
              # Database
              DATABASE_URL="{{ DATABASE_URL }}"
              
              # AWS S3
              AWS_ACCESS_KEY_ID="{{ AWS_ACCESS_KEY_ID }}"
              AWS_SECRET_ACCESS_KEY="{{ AWS_SECRET_ACCESS_KEY }}"
              AWS_REGION="{{ AWS_REGION }}"
              S3_BUCKET_NAME="{{ S3_BUCKET_NAME }}"
              
              # Pinecone
              PINECONE_API_KEY="{{ PINECONE_API_KEY }}"
              PINECONE_INDEX_NAME="{{ PINECONE_INDEX_NAME }}"
              
              # JWT
              JWT_SECRET="{{ JWT_SECRET }}"
              
              # Service URL
              EMBEDDING_SERVICE_URL="{{ EMBEDDING_SERVICE_URL }}"
            dest: /opt/videocopilot/envs/embedding-service.env
            mode: '0600'
            owner: videocopilot
            group: videocopilot

        - name: Create .env file for intelligence-service
          copy:
            content: |
              # Database
              DATABASE_URL="{{ DATABASE_URL }}"
              
              # AWS S3
              AWS_ACCESS_KEY_ID="{{ AWS_ACCESS_KEY_ID }}"
              AWS_SECRET_ACCESS_KEY="{{ AWS_SECRET_ACCESS_KEY }}"
              AWS_REGION="{{ AWS_REGION }}"
              AWS_S3_BUCKET="{{ AWS_S3_BUCKET }}"
              
              # Pinecone
              PINECONE_API_KEY="{{ PINECONE_API_KEY }}"
              PINECONE_INDEX_NAME="{{ PINECONE_INDEX_NAME }}"
              
              # Groq API
              GROQ_API_KEY="{{ GROQ_API_KEY }}"
              
              # JWT
              JWT_SECRET="{{ JWT_SECRET }}"
            dest: /opt/videocopilot/envs/intelligence-service.env
            mode: '0600'
            owner: videocopilot
            group: videocopilot

        - name: Create .env file for video-processing-service
          copy:
            content: |
              # Database
              DATABASE_URL="{{ DATABASE_URL }}"
              
              # AWS S3
              AWS_ACCESS_KEY_ID="{{ AWS_ACCESS_KEY_ID }}"
              AWS_SECRET_ACCESS_KEY="{{ AWS_SECRET_ACCESS_KEY }}"
              AWS_REGION="{{ AWS_REGION }}"
              AWS_S3_BUCKET="{{ AWS_S3_BUCKET }}"
              
              # Pinecone
              PINECONE_API_KEY="{{ PINECONE_API_KEY }}"
              PINECONE_INDEX_NAME="{{ PINECONE_INDEX_NAME }}"
              
              # Groq API
              GROQ_API_KEY="{{ GROQ_API_KEY }}"
              
              # JWT
              JWT_SECRET="{{ JWT_SECRET }}"
              
              # Service URL
              VIDEO_PROCESSING_SERVICE_URL="{{ VIDEO_PROCESSING_SERVICE_URL }}"
            dest: /opt/videocopilot/envs/video-processing-service.env
            mode: '0600'
            owner: videocopilot
            group: videocopilot

    - name: Restart services
      systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: yes
      loop:
        - docker
        - k3s
        - jenkins